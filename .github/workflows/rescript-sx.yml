# based of https://github.com/davesnx/styled-ppx/blob/main/.github/workflows/ci.yml
name: rescript-sx CI

on:
  push:
    branches:
      - main

jobs:
  build_macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x]
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Load global cache (~/.esy/source)
        uses: actions/cache@v2
        with:
          path: ~/.esy/source
          key: source-${{ matrix.os }}-${{ hashFiles('**/index.json') }}

      - name: Install esy
        run: npm install -g esy@0.6.11

      - name: Install dependencies
        run: esy install

      - name: Print esy cache
        id: print_esy_cache
        run: node .github/ci-scripts/print-esy-cache.js

      - name: Load dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: build-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: build-${{ matrix.os }}-

      - name: Import dependencies
        run: esy import-build

      - name: Build dependencies
        run: esy build-dependencies

      - name: Build
        run: esy build

      - name: Export dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: esy export-dependencies

      - name: Strip debug symbols for macOS
        run: strip -S _build/install/default/bin/sx_ppx

      - name: Upload artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: _build/install/default/bin/sx_ppx

      # Cleanup build cache in case dependencies have changed
      - name: Cleanup
        run: esy cleanup .

  build_linux_static:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    container:
       image: node:14-alpine

    steps:
      - uses: actions/checkout@v2

      # TODO: fix this by adding it to the image instead
      - name: add build deps
        run: apk add tar ca-certificates wget curl perl-utils git \
          patch gcc g++ musl-dev make m4 linux-headers coreutils file

      - name: Load global cache (~/.esy/source)
        uses: actions/cache@v2
        with:
          path: ~/.esy/source
          key: source-${{ matrix.os }}-${{ hashFiles('**/index.json') }}

      - name: Install dependencies
        run: esy install

      - name: Print esy cache
        id: print_esy_cache
        run: node .github/ci-scripts/print-esy-cache.js

      - name: Load dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: build-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: build-${{ matrix.os }}-

      - name: Import dependencies
        run: esy import-build

      - name: Build dependencies
        run: esy build-dependencies

      # build static binary for linux
      - name: Build
        run: esy build-static

      - name: Export dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: esy export-dependencies

      - name: Strip debug symbols for Linux
        run: strip --strip-all _build/install/default/bin/sx_ppx

      - name: Upload artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: _build/install/default/bin/sx_ppx

      # Cleanup build cache in case dependencies have changed
      - name: Cleanup
        run: esy cleanup .

  publish:
    name: Publish
    needs: 
      - build_macos
      - build_linux_static
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Make NPM release skeleton
        run: node .github/ci-scripts/make-skeleton.js

      - name: Print short SHA
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Download linux artifacts
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: _release/platform-linux-x64

      - name: Download macOS artifacts
        uses: actions/download-artifact@master
        with:
          name: macos-latest
          path: _release/platform-darwin-x64

      - name: Release NPM package
        if: ${{ success() && github.event_name != 'pull_request' }}
        working-directory: ./_release
        run: |
          npm config set scope "@hyper-systems"
          REMOTE=$(npm view @hyper-systems/rescript-sx version || echo "0")
          CURRENT=$(jq -r '.version' package.json)
          echo "Remote version: ${REMOTE}"
          echo "Local version: ${CURRENT}"
          if [ "$REMOTE" != "$CURRENT" ]
          then
              npm publish --access public
          else
              echo "New verison and remote version are equal, nothing to publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Release nightly NPM package
        id: nightly
        working-directory: ./_release
        run: |
          npm config set scope "@hyper-systems"
          npm version prerelease --preid ${{ steps.sha.outputs.sha_short }} -no-git-tag-version
          REMOTE=$(npm view @hyper-systems/rescript-sx version --tag nightly || echo "0")
          CURRENT=$(jq -r '.version' package.json)
          echo "Remote version: ${REMOTE}"
          echo "Local version: ${CURRENT}"
          if [ "$REMOTE" != "$CURRENT" ]
          then
              npm publish --access public --tag nightly
              echo "::set-output name=version::$(npm view @hyper-systems/rescript-sx@nightly version)"
          else
              echo "New verison and remote version are equal, nothing to publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
